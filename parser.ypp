%{
	#include <iostream>
	#include "output.hpp"
	using namespace output;

	extern int yylineno;
	extern int yylex();
	extern char* yytext;
	void yyerror(const char*);
%}

%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc CONST
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMA
%nonassoc ID
%nonassoc NUM
%nonassoc STRING
%nonassoc LBRACE
%nonassoc RBRACE
%nonassoc IF








%right ASSIGN

%left OR
%left AND

%left RELOP_EQUALITY
%nonassoc RELOP

%left PLUS_MINUS
%left MULTI_DEV
%right NOT 

%left LPAREN
%left RPAREN

%nonassoc ELSE


%%
Program : Funcs {printProductionRule(1);};
Funcs : {printProductionRule(2);}
	  | FuncDecl Funcs {printProductionRule(3);};

FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {printProductionRule(4);};

RetType : Type {printProductionRule(5);} 
		| VOID {printProductionRule(6);};
		
Formals : {printProductionRule(7);}
		| FormalsList {printProductionRule(8);};
		
FormalsList : FormalDecl {printProductionRule(9);}
			| FormalDecl COMMA FormalsList {printProductionRule(10);};

FormalDecl : TypeAnnotation Type ID {printProductionRule(11);};

Statements : Statement {printProductionRule(12);}
		   | Statements Statement {printProductionRule(13);};
		   
Statement : LBRACE Statements RBRACE {printProductionRule(14);}
		  | TypeAnnotation Type ID SC {printProductionRule(15);}
		  | TypeAnnotation Type ID ASSIGN Exp SC {printProductionRule(16);}
		  | ID ASSIGN Exp SC {printProductionRule(17);}
		  | Call SC {printProductionRule(18);}
		  | RETURN SC {printProductionRule(19);}
		  | RETURN Exp SC {printProductionRule(20);}
		  | IF LPAREN Exp RPAREN Statement {printProductionRule(21);}
		  | IF LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(22);}
		  | WHILE LPAREN Exp RPAREN Statement {printProductionRule(23);}
		  | BREAK SC {printProductionRule(24);}
		  | CONTINUE SC {printProductionRule(25);}
		  
Call : ID LPAREN ExpList RPAREN {printProductionRule(26);}
	 | ID LPAREN RPAREN {printProductionRule(27);};

ExpList : Exp {printProductionRule(28);}
		| Exp COMMA ExpList {printProductionRule(29);};
		
Type : INT {printProductionRule(30);}
	 | BYTE {printProductionRule(31);}
	 | BOOL {printProductionRule(32);};

TypeAnnotation : { printProductionRule(33);}
               | CONST {printProductionRule(34);}

Exp : LPAREN Exp RPAREN {printProductionRule(35);}
    | Exp MULTI_DEV Exp {printProductionRule(36);}
    | Exp PLUS_MINUS Exp {printProductionRule(36);}
	| ID {printProductionRule(37);}
	| Call {printProductionRule(38);}
	| NUM {printProductionRule(39);}
	| NUM B {printProductionRule(40);}
	| STRING {printProductionRule(41);}
	| TRUE {printProductionRule(42);}
	| FALSE {printProductionRule(43);}
	| NOT Exp {printProductionRule(44);}
	| Exp AND Exp {printProductionRule(45);}
	| Exp OR Exp {printProductionRule(46);}
	| Exp RELOP Exp {printProductionRule(47);}
    | Exp RELOP_EQUALITY Exp {printProductionRule(47);}
	| LPAREN TypeAnnotation Type RPAREN Exp {printProductionRule(48);}
	 
%%
void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}

int main() {

	return yyparse();
}
